# Function to source files if they exist
function zsh_add_file() {
    [ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
}

function zsh_add_plugin() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then 
        # For plugins
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
    fi
}

function zsh_add_completion() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then 
        # For completions
		completion_file_path=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
		fpath+="$(dirname "${completion_file_path}")"
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
		fpath+=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
        [ -f $ZDOTDIR/.zccompdump ] && $ZDOTDIR/.zccompdump
    fi
	completion_file="$(basename "${completion_file_path}")"
	if [ "$2" = true ] && compinit "${completion_file:1}"
}



# function mach_java_mode() {
    #THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
    # export SDKMAN_DIR="$HOME/.sdkman"
    # [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
# }



# Profiling (useless, see: https://github.com/romkatv/zsh-bench#conclusions)
# function timezsh() {
#   shell=${1-$SHELL}
#   for i in $(seq 1 10); do time $shell -i -c exit; done
# }




# # fasd
# if which fasd >/dev/null; then
#     # install fasd hooks and basic aliases in the shell
#     # eval "$(fasd --init auto)"
#
#     # if there is fzf available use it to search fasd results
#     if which fzf >/dev/null; then
#
#         alias v >/dev/null && unalias v
#         alias vd >/dev/null && unalias vd
#         # alias z >/dev/null && unalias z
#
#         # edit given file or search in recently used files and cd into the directory containing the file
#       
#     fi
# fi

function v {
  local file
   # if arg1 is a path to existing file then simply open it in the editor
  test -e "$1" && $EDITOR "$@" && return
   # else use fasd and fzf to search for recent files
  file="$(fasd -Rfl "$*" | fzf -1 -0 --no-sort +m)" && dir=$(dirname "$file") && cd "$dir" && $EDITOR "${file}" || $EDITOR "$@"
}

# cd into the directory containing a recently used file and open fzf to browse
function vd {
  local dir
  local file
  file="$(fasd -Rfl "$*" | fzf -1 -0 --no-sort +m)" && dir=$(dirname "$file") && cd "$dir" && fe
}

# cd into given dir or search in recently used dirs
# function z {
#   [ $# -eq 1 ] && test -d "$1" && cd "$1" && return
#   local dir
#   dir="$(fasd -Rdl "$*" | fzf -1 -0 --no-sort +m)" && cd "${dir}" || return 1
# }


# fe [FUZZY PATTERN] - Open the selected file in the dir with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
function fe() {
  local files
  IFS=$'\n' files=($(fzf --query="$1" --multi --select-1 --exit-0 --preview\
  'bat --color "always" {}' --preview-window=right:60% ))
  [[ -n "$files" ]] && ${EDITOR:-nvim} "${files[@]}"
}


# function cdf() {
#   local file
#   local dir
#   file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir" || exit
# }
